-- Replace "ToolName" with the name of the tool you want to check for
local toolName = "The Arkenstone"
local checkInterval = 10  -- Time in seconds between each check

-- Track which players have already been announced
local playersAnnounced = {}
local lastMessage = ""

-- Function to check if a player has the specific tool in their backpack
local function playerHasTool(player)
    local backpack = player:FindFirstChildOfClass("Backpack")
    if backpack then
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") and item.Name == toolName then
                return true
            end
        end
    end
    return false
end

-- Function to send a message about tool ownership
local function announcePlayersWithTool()
    local currentPlayersWithTool = {}
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if playerHasTool(player) then
            table.insert(currentPlayersWithTool, player.Name)
        end
    end

    local message
    if #currentPlayersWithTool > 0 then
        message = table.concat(currentPlayersWithTool, ", ") .. " have " .. toolName
    else
        message = "No one has " .. toolName
    end
    
    -- Only send a message if it has changed from the last check
    if message ~= lastMessage then
        local args = {
            [1] = message,
            [2] = "All"
        }
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
        lastMessage = message
    end
end

-- Function to handle player respawn
local function onPlayerRespawn(player)
    playersAnnounced[player.UserId] = nil
end

-- Connect player respawn event
game:GetService("Players").PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        onPlayerRespawn(player)
    end)
end)

-- Loop to periodically check for the tool
while true do
    announcePlayersWithTool()
    wait(checkInterval)  -- Wait before checking again
end
